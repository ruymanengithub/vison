#! $HOME/SOFTWARE/anaconda2/envs/vison/bin/ python

# -*- coding: utf-8 -*-
"""

Script to execute the "vison" pipeline in order to process and analyze data 
acquired during the VIS Ground Calibration Campaign.

The pipeline is meant to be run in several modes:
    
    - listening and checking: 
        waiting for data as it comes out of the chamber, and doing minimal
        checks on data: consistency, HK, basic quality
    - acquired data-set / checking:
        same quick checks as before, but running on an already acquired data-set.
    - full-analysis and reporting:
        full-scale processing and analysis on an acquired data-set.



Created on Wed Jan 10 10:40:40 2018

:author: Ruyman Azzollini
:contact: r.azzollini_at_ucl.ac.uk
"""

# IMPORT STUFF
import os
from pdb import set_trace as stop
import numpy as np
from optparse import OptionParser
import sys
import imp
import multiprocessing
import importlib

from vison import Pipe
from vison.pipe.lib import broadcast_todo_flags
from vison.support import vjson
# END IMPORT


def openpyconfigf(configf,RUN):
    
    with open(configf) as f:
        #execfile(configf,dict(RUNs=['D21']))
        RUNs=[RUN]
        exec f
        f.close()
    
    return inputdict

#def loadpyconfig(configf):
#   
#   c = importlib.import_module(configf)
#   #import sys
#   #__import__(configf)
#   #c = sys.modules[configf]
#   stop()
#   return c.get_inputdict

def parse_jsonconfig(jsonfile):
    rawjson = vjson.load_jsonfile(json,useyaml=True)
    #PENDING
    sys.exit('PENDING: finish ingestion of json inputs in vison_run')

if __name__ == '__main__':

    usage = 'usage: %prog [options]'
    parser = OptionParser(usage)
    parser.add_option("-y", "--pyconfig", dest="pyconfig", default='',
                      help="Python configuration file to run the pipeline.")
    parser.add_option("-R", "--run", dest="run", default='',
                      help="Run to process - TESTS.")
    parser.add_option("-j", "--json", dest="json", default='',
                      help="Json configuration file to run the pipeline.")
    parser.add_option("-d", "--day", dest="dayfolder", default='',
                      help="Day-folder. Only needed in 'wait' mode.")
    parser.add_option("-v", "--elvis", dest="elvis", default='6.3.0',
                      help="ELVIS vrsion. Only needed in 'wait' mode.")
    parser.add_option("-W", "--wait", dest="wait", action="store_true",
                      default=False, help="Run in 'data-waiting/listening' mode.")
    parser.add_option("-k", "--check", dest="check", action="store_true",
                      default=False, help="Check consistency and basic quality of data only.")
    parser.add_option("-l", "--log", dest="log", action="store_true",
                      default=False, help="Start an Execution Log.")
    parser.add_option("-r", "--drill", dest="drill", action="store_true",
                      default=False, help="Do a drill execution.")
    parser.add_option("-g", "--debug", dest="debug", action="store_true",
                      default=False, help="Run in 'debug' mode.")
    parser.add_option("-T", "--test", dest="test", action="store_true", default=False,
                      help="Run in 'test' mode (just ingest inputs and initialize pipeline and output directories)")
    parser.add_option("-O", "--ObsID", dest="startobsid", default="0",
                      help="Only use data from given ObsID and onwards. Only used in 'wait' mode.")
    parser.add_option("-m", "--multithread", dest="multithread", action="store_true", default=False,
                      help="Use all CPUs available? Default=False [single thread]")
    (options, args) = parser.parse_args()

    pyconfig = options.pyconfig
    json = options.json
    
    assert (len(pyconfig) >0 ) != (len(json)>0), "pyconfig XOR json should be provided as input, not both, QUITTING!"
    
    run = options.run
    dayfolder = options.dayfolder
    elvis = options.elvis
    wait = options.wait
    docheck = options.check
    dolog = options.log
    drill = options.drill
    debug = options.debug
    dotest = options.test
    startobsid = int(options.startobsid)
    multithread = options.multithread
    
    if len(pyconfig)>0:
        inputdict = openpyconfigf(pyconfig,run)
        #inputdictgetter = loadpyconfig(pyconfig)
    elif len(json)>=0:
        inputdict = parse_jsonconfig(json)
    
    
    if docheck or dotest:
        inputdict = broadcast_todo_flags(inputdict, docheck=docheck, dotest=dotest)
    
    
    if multithread:
        cpu_count = multiprocessing.cpu_count()
    else:
        cpu_count = 1
    
    stop()
    pipe = Pipe(inputdict, dolog=dolog, drill=drill,
                debug=debug, startobsid=startobsid,
                processes=cpu_count)

    if wait:
        pipe.wait_and_run(dayfolder, elvis=elvis)
    else:
        pipe.run()
