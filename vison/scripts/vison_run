#! $HOME/SOFTWARE/anaconda2/envs/vison/bin/ python

# -*- coding: utf-8 -*-
"""

Script to execute the "vison" pipeline in order to process and analyze data 
acquired during the VIS Ground Calibration Campaign.

The pipeline is meant to be run in several modes:
    
    - listening and checking: 
        waiting for data as it comes out of the chamber, and doing minimal
        checks on data: consistency, HK, basic quality
    - acquired data-set / checking:
        same quick checks as before, but running on an already acquired data-set.
    - full-analysis and reporting:
        full-scale processing and analysis on an acquired data-set.



Created on Wed Jan 10 10:40:40 2018

:author: Ruyman Azzollini
:contact: r.azzollini_at_ucl.ac.uk
"""

# IMPORT STUFF
import os
from pdb import set_trace as stop
import numpy as np
from optparse import OptionParser
import sys
import imp

from vison import Pipe
# END IMPORT


def _update_todo_flags(inputdict,docheck=False,dotest=False):
    
    assert np.array([docheck,dotest]).sum() <= 1, 'At most 1 kwd should be True!'
    if np.array([docheck,dotest]).sum() == 0: return inputdict
    
    for taskname in inputdict['tasks']:
        for key in inputdict[taskname]['todo_flags']:
            inputdict[taskname]['todo_flags'][key] = False
    
    if docheck:
        _todocheck = dict(init=True,check=True,report=True)
    if dotest:
        _todocheck = dict(init=True)
    
    for taskname in inputdict['tasks']:
        inputdict[taskname]['todo_flags'].update(_todocheck)

    return inputdict

def openconfigf(configf):
    f = open(configf)
    exec f
    f.close()
    return inputdict

if __name__ == '__main__':

    usage='usage: %prog [options]'
    parser = OptionParser(usage)
    parser.add_option("-c","--config",dest="config",default='',help="Configuration file to run the pipeline.")    
    parser.add_option("-e","--explog",dest="explog",default='',help="exposure log. Only needed in 'wait' mode.")
    parser.add_option("-v","--elvis",dest="elvis",default='6.3.0',help="ELVIS vrsion. Only needed in 'wait' mode.")
    parser.add_option("-W","--wait",dest="wait",action="store_true",default=False,help="Run in 'data-waiting/listening' mode.")
    parser.add_option("-k","--check",dest="check",action="store_true",default=False,help="Check consistency and basic quality of data only.")   
    parser.add_option("-l","--log",dest="log",action="store_true",default=False,help="Start an Execution Log.")
    parser.add_option("-d","--drill",dest="drill",action="store_true", default=False, help="Do a drill execution.")
    parser.add_option("-g","--debug",dest="debug",action="store_true", default=False, help="Run in 'debug' mode.")
    parser.add_option("-T","--test",dest="test",action="store_true",default=False,help="Run in 'test' mode (just ingest inputs and initialize pipeline and output directories)")
    
    (options, args) = parser.parse_args()
    
    configf = options.config
    explogf = options.explogf
    elvis = options.elvis
    wait = options.wait
    docheck = options.check
    dolog = options.log
    drill = options.drill
    debug = options.debug
    dotest = options.test
        
    inputdict = openconfigf(configf)    
    inputdict = _update_todo_flags(inputdict,docheck=docheck,dotest=dotest)
    
    pipe = Pipe(inputdict,dolog=dolog,drill=drill,debug=debug)
    
    if wait:
        pipe.wait_and_run(explogf,elvis=elvis)
    else:
        pipe.run()
    
    
